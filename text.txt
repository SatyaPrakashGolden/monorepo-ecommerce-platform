payment-service/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ app.module.ts
â”‚   â”œâ”€â”€ main.ts
â”‚   â”œâ”€â”€ payment/
â”‚   â”‚   â”œâ”€â”€ dto/
â”‚   â”‚   â”‚   â”œâ”€â”€ create-order.dto.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ payment-callback.dto.ts
â”‚   â”‚   â”‚   â”œâ”€â”€ create-payment.dto.ts  # Optional, if used for additional payment creation
â”‚   â”‚   â”‚   â”œâ”€â”€ verify-payment.dto.ts  # Optional, if used for payment verification
â”‚   â”‚   â”œâ”€â”€ entities/
â”‚   â”‚   â”‚   â”œâ”€â”€ payment.entity.ts
â”‚   â”‚   â”œâ”€â”€ payment.controller.ts
â”‚   â”‚   â”œâ”€â”€ payment.module.ts
â”‚   â”‚   â”œâ”€â”€ payment.service.ts
â”‚   â”œâ”€â”€ shared/
â”‚       â”œâ”€â”€ controllers/
â”‚           â”œâ”€â”€ saga-health.controller.ts
â”‚       â”œâ”€â”€ entities/
â”‚           â”œâ”€â”€ saga-state.entity.ts
â”‚       â”œâ”€â”€ services/
â”‚           â”œâ”€â”€ saga-orchestrator.service.ts
â”‚           â”œâ”€â”€ saga-monitor.service.ts
â”‚       â”œâ”€â”€ types/
â”‚           â”œâ”€â”€ saga-events.ts
â”‚       â”œâ”€â”€ utils/
â”‚           â”œâ”€â”€ saga-logger.util.ts
â”‚       â”œâ”€â”€ shared.module.ts
â”œâ”€â”€ .env
â”œâ”€â”€ tsconfig.json
â”œâ”€â”€ package.json
â”œâ”€â”€ docker-compose.yml  # Shared with order-service for infrastructure
â””â”€â”€ README.md  # Optional documentation




order-service/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ app.module.ts
â”‚   â”œâ”€â”€ main.ts
â”‚   â”œâ”€â”€ order/
â”‚   â”‚   â”œâ”€â”€ dto/
â”‚   â”‚   â”‚   â”œâ”€â”€ create-order.dto.ts
â”‚   â”‚   â”œâ”€â”€ entities/
â”‚   â”‚   â”‚   â”œâ”€â”€ order.entity.ts
â”‚   â”‚   â”œâ”€â”€ order.controller.ts
â”‚   â”‚   â”œâ”€â”€ order.module.ts
â”‚   â”‚   â”œâ”€â”€ order.service.ts
â”‚   â”œâ”€â”€ shared/
â”‚       â”œâ”€â”€ controllers/
â”‚           â”œâ”€â”€ saga-health.controller.ts
â”‚       â”œâ”€â”€ entities/
â”‚           â”œâ”€â”€ saga-state.entity.ts
â”‚       â”œâ”€â”€ services/
â”‚           â”œâ”€â”€ saga-orchestrator.service.ts
â”‚           â”œâ”€â”€ saga-monitor.service.ts
â”‚       â”œâ”€â”€ types/
â”‚           â”œâ”€â”€ saga-events.ts
â”‚       â”œâ”€â”€ utils/
â”‚           â”œâ”€â”€ saga-logger.util.ts
â”‚       â”œâ”€â”€ shared.module.ts
â”œâ”€â”€ .env
â”œâ”€â”€ tsconfig.json
â”œâ”€â”€ package.json
â”œâ”€â”€ docker-compose.yml  # Shared with payment-service for infrastructure
â””â”€â”€ README.md  # Optional documentation





cd ~/monstache-project

# Edit configuration
nano config/monstache.toml

Add to config/monstache.toml:
# MongoDB Atlas connection for fashion_store database
mongo-url = "mongodb+srv://satya:gvddB3fNptw1ABHW@cluster0.4zj2o.mongodb.net/fashion_store?retryWrites=true&w=majority&connectTimeoutMS=60000&socketTimeoutMS=60000&serverSelectionTimeoutMS=60000&maxPoolSize=10"

# Elasticsearch connection
elasticsearch-urls = ["http://localhost:9200"]
elasticsearch-user = "elastic"
elasticsearch-password = "*wUK-Cb6vIgwF8fMmifw"

# Direct read namespaces - all fashion_store collections
direct-read-namespaces = [
  "fashion_store.brands",
  "fashion_store.carts",
  "fashion_store.categories",
  "fashion_store.offers",
  "fashion_store.products",
  "fashion_store.reviewSummaries",
  "fashion_store.reviews",
  "fashion_store.wishlists"
]

# Change stream namespaces - real-time sync for all collections
change-stream-namespaces = [
  "fashion_store.brands",
  "fashion_store.carts",
  "fashion_store.categories",
  "fashion_store.offers",
  "fashion_store.products",
  "fashion_store.reviewSummaries",
  "fashion_store.reviews",
  "fashion_store.wishlists"
]

# Resume configuration
resume = true
resume-name = "monstache-resume-fashion-store"

# Elasticsearch connection settings
elasticsearch-max-conns = 10
elasticsearch-max-seconds = 5

# Logging settings
verbose = true
stats = true
stats-duration = "30s"

# Log configuration
[logs]
info = "/home/satya/monstache-project/logs/monstache-info.log"
error = "/home/satya/monstache-project/logs/monstache-error.log"
stats = "/home/satya/monstache-project/logs/monstache-stats.log"

# Log rotation settings
[log-rotate]
max-size = 100
max-backups = 5
max-age = 7

# Index mappings for each fashion store collection
[[mapping]]
namespace = "fashion_store.brands"
index = "fashion_brands"

[[mapping]]
namespace = "fashion_store.carts"
index = "fashion_carts"

[[mapping]]
namespace = "fashion_store.categories"
index = "fashion_categories"

[[mapping]]
namespace = "fashion_store.offers"
index = "fashion_offers"

[[mapping]]
namespace = "fashion_store.products"
index = "fashion_products"

[[mapping]]
namespace = "fashion_store.reviewSummaries"
index = "fashion_review_summaries"

[[mapping]]
namespace = "fashion_store.reviews"
index = "fashion_reviews"

[[mapping]]
namespace = "fashion_store.wishlists"
index = "fashion_wishlists"

ðŸ“± Step 4: Configure PM2
Your ecosystem.config.js is mostly correct. Update the Monstache script path for reliability.
nano config/ecosystem.config.js

Add to config/ecosystem.config.js:
module.exports = {
  apps: [
    {
      name: 'elasticsearch',
      script: '/home/satya/elasticsearch-9.0.0/bin/elasticsearch',
      cwd: '/home/satya/elasticsearch-9.0.0',
      interpreter: 'bash',
      env: { ES_JAVA_OPTS: '-Xms1g -Xmx1g' },
      error_file: '/home/satya/monstache-project/logs/elasticsearch-error.log',
      out_file: '/home/satya/monstache-project/logs/elasticsearch-out.log',
      time: true,
      autorestart: true,
      max_restarts: 5,
      min_uptime: '10s',
      pid_file: '/home/satya/monstache-project/logs/elasticsearch.pid'
    },
    {
      name: 'monstache',
      script: '/home/satya/monstache-project/monstache',
      args: '-f /home/satya/monstache-project/config/monstache.toml -tpl',
      cwd: '/home/satya/monstache-project',
      interpreter: 'none',
      env: {
        GOMAXPROCS: 2,
        MONSTACHE_MONGO_URL: 'mongodb+srv://satya:gvddB3fNptw1ABHW@cluster0.4zj2o.mongodb.net/fashion_store?retryWrites=true&w=majority',
        ELASTIC_USER: 'elastic',
        ELASTIC_PASSWORD: '*wUK-Cb6vIgwF8fMmifw'
      },
      error_file: '/home/satya/monstache-project/logs/monstache-error.log',
      out_file: '/home/satya/monstache-project/logs/monstache-out.log',
      time: true,
      autorestart: true,
      max_restarts: 10,
      min_uptime: '5s',
      watch: false,
      pid_file: '/home/satya/monstache-project/logs/monstache.pid'
    }
  ]
};







Check Elasticsearch:
curl -u elastic:*wUK-Cb6vIgwF8fMmifw http://localhost:9200/_cluster/health?pretty
curl -u elastic:*wUK-Cb6vIgwF8fMmifw http://localhost:9200/_cat/indices?v


"

Wait 5 seconds, then check:
curl -u elastic:*wUK-Cb6vIgwF8fMmifw http://localhost:9200/fashion_products/_search?pretty | grep "Test Joggers"




Update ecosystem.config.js:
module.exports = {
  apps: [
    {
      name: 'elasticsearch',
      script: '/home/satya/elasticsearch-9.0.0/bin/elasticsearch',
      cwd: '/home/satya/elasticsearch-9.0.0',
      interpreter: 'bash',
      env: { ES_JAVA_OPTS: '-Xms1g -Xmx1g' },
      error_file: '/home/satya/monstache-project/logs/elasticsearch-error.log',
      out_file: '/home/satya/monstache-project/logs/elasticsearch-out.log',
      time: true,
      autorestart: true,
      max_restarts: 5,
      min_uptime: '10s',
      pid_file: '/home/satya/monstache-project/logs/elasticsearch.pid'
    },
    {
      name: 'monstache',
      script: '/home/satya/monstache-project/monstache',
      args: '-f /home/satya/monstache-project/config/monstache.toml -tpl',
      cwd: '/home/satya/monstache-project',
      interpreter: 'none',
      env: {
        GOMAXPROCS: 2,
        MONSTACHE_MONGO_URL: process.env.MONSTACHE_MONGO_URL,
        ELASTIC_USER: process.env.ELASTIC_USER,
        ELASTIC_PASSWORD: process.env.ELASTIC_PASSWORD
      },
      error_file: '/home/satya/monstache-project/logs/monstache-error.log',
      out_file: '/home/satya/monstache-project/logs/monstache-out.log',
      time: true,
      autorestart: true,
      max_restarts: 10,
      min_uptime: '5s',
      watch: false,
      pid_file: '/home/satya/monstache-project/logs/monstache.pid'
    }
  ]
};