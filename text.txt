// /home/satya/myproject/frontend/app/payment/page.tsx
'use client';

import { useState, useEffect, FormEvent } from 'react';
import axios from 'axios';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';

interface CartItem {
  productId: string;
  name: string;
  price: number;
  image: string;
  size: string;
  color: string;
  quantity: number;
}

interface CheckoutData {
  cartItems: CartItem[];
  subtotal: number;
  shipping: number;
  tax: number;
  total: number;
}

interface OrderResponse {
  success: boolean;
  order: {
    id: string;
    amount: number;
    currency: string;
  };
}

interface User {
  id: number;
  emailId: string;
}

export default function PaymentPage() {
  const [checkoutData, setCheckoutData] = useState<CheckoutData | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [error, setError] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);

  // Get access token from localStorage
  const getAccessToken = (): string | null => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('accessToken');
    }
    return null;
  };

  // Get user data from localStorage
  const getUserData = (): User | null => {
    if (typeof window !== 'undefined') {
      const userData = localStorage.getItem('user');
      return userData ? JSON.parse(userData) : null;
    }
    return null;
  };

  // Create axios instance with auth interceptor
  const createAxiosInstance = () => {
    const instance = axios.create();
    
    instance.interceptors.request.use((config) => {
      const token = getAccessToken();
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
      return config;
    });

    return instance;
  };

  // Format price in INR
  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 2,
    }).format(price);
  };

  // Load checkout data and user data from local storage
  useEffect(() => {
    const data = localStorage.getItem('checkoutData');
    const userData = getUserData();
    
    if (data) {
      try {
        const parsedData: CheckoutData = JSON.parse(data);
        setCheckoutData(parsedData);
      } catch (err) {
        console.error('Failed to parse checkout data:', err);
        setError('Failed to load cart details. Please return to cart.');
      }
    } else {
      setError('No cart data found. Please return to cart.');
    }

    if (userData) {
      setUser(userData);
    } else {
      setError('User not authenticated. Please login.');
    }
  }, []);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    if (!checkoutData) {
      setError('No cart data available. Please return to cart.');
      setLoading(false);
      return;
    }

    if (!user) {
      setError('User not authenticated. Please login.');
      setLoading(false);
      return;
    }

    const { cartItems, total } = checkoutData;
    const accessToken = getAccessToken();

    if (!accessToken) {
      setError('Authentication token not found. Please login again.');
      setLoading(false);
      return;
    }

    if (!total || total <= 0) {
      setError('Invalid total amount.');
      setLoading(false);
      return;
    }

    let orderData: OrderResponse['order'] | null = null;
    const axiosInstance = createAxiosInstance();

    try {
      // Reserve inventory for all cart items
      for (const item of cartItems) {
        await axiosInstance.post(
          'http://localhost:2000/api/product/reserve-stock',
          {
            productId: item.productId,
            quantity: item.quantity,
          },
          { timeout: 5000 }
        );
      }

      // Create order with required fields
      // Generate a product_id from cart items (you might want to adjust this logic)
      const productIds = cartItems.map(item => item.productId).join(',');
      
      const { data }: { data: OrderResponse } = await axiosInstance.post(
        `http://localhost:2004/api/payment/order`,
        { 
          amount: total, // Send original amount, not in paise
          currency: 'INR',
          user_id: user.id, // Add required user_id
          product_id: productIds // Add required product_id (composite of all products)
        },
        { timeout: 10000 }
      );

      if (!data.success || !data.order) {
        throw new Error('Failed to create order');
      }

      orderData = data.order;

      // Create form and submit to Razorpay
      const form = document.createElement('form');
      form.method = 'POST';
      form.action = 'https://api.razorpay.com/v1/checkout/embedded';

      // Add form fields
      const fields = {
        key_id: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID || 'rzp_test_StrkvgR0IMUtoF',
        amount: data.order.amount.toString(),
        currency: data.order.currency,
        order_id: data.order.id,
        name: 'Delente Technologies Pvt. Ltd.',
        description: 'Payment for Cart Items',
        prefill_name: user.emailId.split('@')[0] || 'Customer', // Use user data
        prefill_email: user.emailId, // Use user email
        notes_address: 'M3M Cosmopolitan, Sector 66, Gurugram, Haryana 122002',
        theme_color: '#1E40AF',
        callback_url: `http://localhost:2004/api/payment/callback`, // Fixed port to match your API
        cancel_url: `${window.location.origin}/payment/cancel`,
      };

      Object.entries(fields).forEach(([key, value]) => {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = key;
        input.value = value;
        form.appendChild(input);
      });

      document.body.appendChild(form);
      form.submit();

      // Clear local storage after successful payment initiation
      localStorage.removeItem('checkoutData');
    } catch (err: any) {
      // Release inventory for all cart items on error
      try {
        for (const item of cartItems) {
          await axiosInstance.post(
            'http://localhost:2000/api/product/release-stock',
            {
              productId: item.productId,
              quantity: item.quantity,
            },
            { timeout: 5000 }
          );
        }
      } catch (releaseErr) {
        console.error('Failed to release inventory:', releaseErr);
      }

      // Log payment failure if order was created
      if (orderData) {
        try {
          await axiosInstance.post('http://localhost:2004/api/payment/failure', {
            id: orderData.id,
            paymentId: null,
            errorCode: err.response?.status?.toString() || 'UNKNOWN_ERROR',
            errorDescription: err.response?.data?.message || err.message || 'Payment initialization failed',
            errorReason: 'ORDER_CREATION_FAILED',
            type: 'frontend_error',
            userId: user.id,
          });
        } catch (logErr) {
          console.error('Failed to log payment failure:', logErr);
        }
      }

      // Handle authentication errors
      if (err.response?.status === 401) {
        setError('Authentication failed. Please login again.');
        // Optionally redirect to login page
        // window.location.href = '/login';
      } else {
        setError(
          err.response?.data?.message ||
            err.message ||
            'Failed to process payment or reserve inventory'
        );
      }
      setLoading(false);
    }
  };

  if (!checkoutData || !user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md text-center">
          <h1 className="text-2xl font-bold mb-6">Error</h1>
          <p className="text-red-500 mb-4">{error || 'Loading...'}</p>
          <div className="space-y-2">
            <Button asChild className="w-full">
              <Link href="/cart">Return to Cart</Link>
            </Button>
            {!user && (
              <Button asChild variant="outline" className="w-full">
                <Link href="/login">Login</Link>
              </Button>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-2xl">
        <h1 className="text-2xl font-bold mb-6 text-center">Delente Technologies Payment</h1>

        {/* User Info */}
        <div className="mb-4 text-sm text-gray-600">
          <p>Logged in as: {user.emailId}</p>
        </div>

        {/* Order Summary */}
        <div className="mb-6">
          <h2 className="text-lg font-semibold mb-4">Order Summary</h2>
          <div className="space-y-4">
            {checkoutData.cartItems.map((item) => (
              <div
                key={`${item.productId}-${item.size}-${item.color}`}
                className="flex justify-between text-sm"
              >
                <span>
                  {item.name} (Size: {item.size}, Color: {item.color}, Qty: {item.quantity})
                </span>
                <span>{formatPrice(item.price * item.quantity)}</span>
              </div>
            ))}
            <Separator className="my-4" />
            <div className="space-y-2">
              <div className="flex justify-between">
                <span>Subtotal</span>
                <span>{formatPrice(checkoutData.subtotal)}</span>
              </div>
              <div className="flex justify-between">
                <span>Shipping</span>
                <span>{formatPrice(checkoutData.shipping)}</span>
              </div>
              <div className="flex justify-between">
                <span>Tax</span>
                <span>{formatPrice(checkoutData.tax)}</span>
              </div>
              <Separator className="my-2" />
              <div className="flex justify-between font-semibold">
                <span>Total</span>
                <span>{formatPrice(checkoutData.total)}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Payment Form */}
        <form onSubmit={handleSubmit} className="space-y-4">
          {error && <p className="text-red-500 text-sm">{error}</p>}
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:bg-blue-300 transition disabled:cursor-not-allowed"
          >
            {loading ? (
              <span className="flex items-center justify-center">
                <svg className="animate-spin h-5 w-5 mr-2" viewBox="0 0 24 24">
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  />
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  />
                </svg>
                Processing...
              </span>
            ) : (
              'Pay Now'
            )}
          </button>
        </form>
        <p className="mt-4 text-sm text-gray-600 text-center">
          Delente Technologies Pvt. Ltd.
          <br />
          M3M Cosmopolitan, Sector 66, Gurugram, Haryana 122002
        </p>
      </div>
    </div>
  );
}
__
// /home/satya/myproject/frontend/app/payment/success/page.tsx
'use client';

import { useSearchParams } from 'next/navigation';
import { useEffect, useState } from 'react';
import Link from 'next/link';

export default function PaymentSuccessPage() {
  const searchParams = useSearchParams();
  const paymentId = searchParams.get('payment_id');
  const orderId = searchParams.get('order_id');
  const userId = searchParams.get('user_id');
  const amount = searchParams.get('amount');
  
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Clean up any Razorpay related localStorage items
    const keysToRemove = [
      'prefill_data_v1',
      'rzp_device_id',
      'truecaller_user_metric',
      'userConsent',
      'checkoutData', // Also clear checkout data since payment is successful
    ];
    
    keysToRemove.forEach((key) => {
      try {
        localStorage.removeItem(key);
      } catch (error) {
        console.error(`Failed to remove ${key} from localStorage:`, error);
      }
    });

    // Optional: Send analytics or confirmation to your backend
    if (paymentId && orderId) {
      // You can add analytics tracking here
      console.log('Payment successful:', { paymentId, orderId, userId });
      
      // Optional: Call your backend to confirm the payment was processed
      // confirmPaymentSuccess(paymentId, orderId);
    }

    setIsLoading(false);
  }, [paymentId, orderId, userId]);

  // Optional function to confirm payment with backend
  // const confirmPaymentSuccess = async (paymentId: string, orderId: string) => {
  //   try {
  //     await fetch('/api/payment/confirm', {
  //       method: 'POST',
  //       headers: { 'Content-Type': 'application/json' },
  //       body: JSON.stringify({ paymentId, orderId })
  //     });
  //   } catch (error) {
  //     console.error('Failed to confirm payment:', error);
  //   }
  // };

  const formatPaymentId = (id: string) => {
    // Format payment ID for better readability (e.g., pay_1234567890 -> pay_****7890)
    if (id.length > 8) {
      return id.substring(0, 4) + '****' + id.substring(id.length - 4);
    }
    return id;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p>Processing payment confirmation...</p>
        </div>
      </div>
    );
  }

  // Show error if no payment details are found
  if (!paymentId && !orderId) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md text-center">
          <div className="mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
            <svg className="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h1 className="text-2xl font-bold text-red-600 mb-2">Invalid Access</h1>
          <p className="text-gray-600 mb-6">No payment information found.</p>
          <Link
            href="/"
            className="block w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition"
          >
            Go to Dashboard
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md text-center">
        <div className="mb-6">
          {/* Success Animation */}
          <div className="mx-auto w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mb-4 animate-pulse">
            <div className="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center">
              <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
              </svg>
            </div>
          </div>
          <h1 className="text-2xl font-bold text-green-600 mb-2">Payment Successful!</h1>
          <p className="text-gray-600">Your payment has been processed successfully.</p>
          <p className="text-sm text-gray-500 mt-2">You will receive a confirmation email shortly.</p>
        </div>

        {/* Transaction Details */}
        <div className="bg-gray-50 p-4 rounded-lg mb-6 text-left">
          <h2 className="text-lg font-semibold mb-3 text-center">Transaction Details</h2>
          
          {paymentId && (
            <div className="flex justify-between items-center py-2 border-b border-gray-200">
              <span className="text-sm font-medium text-gray-600">Payment ID:</span>
              <span className="text-sm text-gray-800 font-mono">{formatPaymentId(paymentId)}</span>
            </div>
          )}
          
          {orderId && (
            <div className="flex justify-between items-center py-2 border-b border-gray-200">
              <span className="text-sm font-medium text-gray-600">Order ID:</span>
              <span className="text-sm text-gray-800 font-mono">{orderId}</span>
            </div>
          )}
          
          {amount && (
            <div className="flex justify-between items-center py-2 border-b border-gray-200">
              <span className="text-sm font-medium text-gray-600">Amount:</span>
              <span className="text-sm text-gray-800 font-semibold">₹{amount}</span>
            </div>
          )}
          
          <div className="flex justify-between items-center py-2">
            <span className="text-sm font-medium text-gray-600">Status:</span>
            <span className="text-sm bg-green-100 text-green-800 px-2 py-1 rounded-full font-semibold">
              Completed
            </span>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="space-y-3">
          <Link
            href="/orders"
            className="block w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 transition font-semibold"
          >
            View Order Details
          </Link>
          
          <Link
            href="/"
            className="block w-full bg-gray-200 text-gray-800 py-3 px-4 rounded-md hover:bg-gray-300 transition font-semibold"
          >
            Continue Shopping
          </Link>
          
          <Link
            href="/payment"
            className="block w-full border border-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-50 transition text-sm"
          >
            Make Another Payment
          </Link>
        </div>

        {/* Additional Information */}
        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <p className="text-sm text-blue-700 font-medium mb-1">What happens next?</p>
          <ul className="text-xs text-blue-600 text-left space-y-1">
            <li>• Order confirmation email sent</li>
            <li>• Item(s) will be processed for shipping</li>
            <li>• Track your order in "My Orders"</li>
          </ul>
        </div>

        {/* Company Info */}
        <p className="mt-6 text-xs text-gray-500">
          Delente Technologies Pvt. Ltd.<br />
          M3M Cosmopolitan, Sector 66, Gurugram, Haryana 122002<br />
          <span className="text-gray-400">Transaction processed securely</span>
        </p>
      </div>
    </div>
  );
}

______________________
// /home/satya/myproject/frontend/app/payment/cancel/page.tsx
'use client';

import { useSearchParams } from 'next/navigation';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import axios from 'axios';

interface CartItem {
  productId: string;
  name: string;
  price: number;
  image: string;
  size: string;
  color: string;
  quantity: number;
}

interface CheckoutData {
  cartItems: CartItem[];
  subtotal: number;
  shipping: number;
  tax: number;
  total: number;
}

export default function PaymentCancelPage() {
  const searchParams = useSearchParams();
  const [isProcessing, setIsProcessing] = useState(true);
  const [releaseStatus, setReleaseStatus] = useState<'processing' | 'success' | 'error'>('processing');

  // Get access token from localStorage
  const getAccessToken = (): string | null => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('accessToken');
    }
    return null;
  };

  // Create axios instance with auth interceptor
  const createAxiosInstance = () => {
    const instance = axios.create();
    
    instance.interceptors.request.use((config) => {
      const token = getAccessToken();
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
      return config;
    });

    return instance;
  };

  useEffect(() => {
    // Release inventory when payment is cancelled
    const releaseInventory = async () => {
      try {
        // Get checkout data from localStorage
        const checkoutDataStr = localStorage.getItem('checkoutData');
        
        if (checkoutDataStr) {
          const checkoutData: CheckoutData = JSON.parse(checkoutDataStr);
          const axiosInstance = createAxiosInstance();

          // Release inventory for all cart items
          for (const item of checkoutData.cartItems) {
            try {
              await axiosInstance.post(
                'http://localhost:2000/api/product/release-stock',
                {
                  productId: item.productId,
                  quantity: item.quantity,
                },
                { timeout: 5000 }
              );
              console.log(`Inventory released for product: ${item.productId}, quantity: ${item.quantity}`);
            } catch (itemError) {
              console.error(`Failed to release inventory for product ${item.productId}:`, itemError);
            }
          }

          setReleaseStatus('success');
          console.log('All inventory released due to payment cancellation');
        } else {
          console.warn('No checkout data found to release inventory');
          setReleaseStatus('success'); // No inventory to release
        }
      } catch (error) {
        console.error('Failed to release inventory:', error);
        setReleaseStatus('error');
      } finally {
        setIsProcessing(false);
      }
    };

    const cleanupAndRelease = async () => {
      // Release inventory first
      await releaseInventory();

      // Clean up localStorage items
      const keysToRemove = [
        'prefill_data_v1',
        'rzp_device_id',
        'truecaller_user_metric',
        'userConsent',
        'checkoutData', // Clear checkout data since payment was cancelled
      ];
      
      keysToRemove.forEach((key) => {
        try {
          localStorage.removeItem(key);
        } catch (error) {
          console.error(`Failed to remove ${key} from localStorage:`, error);
        }
      });
    };

    cleanupAndRelease();
  }, []);

  if (isProcessing) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-600 mx-auto mb-4"></div>
          <h2 className="text-lg font-semibold mb-2">Processing Cancellation</h2>
          <p className="text-gray-600">Releasing reserved inventory...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md text-center">
        <div className="mb-6">
          <div className="mx-auto w-20 h-20 bg-yellow-100 rounded-full flex items-center justify-center mb-4">
            <div className="w-16 h-16 bg-yellow-500 rounded-full flex items-center justify-center">
              <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.664-.833-2.464 0L5.232 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
          </div>
          <h1 className="text-2xl font-bold text-yellow-600 mb-2">Payment Cancelled</h1>
          <p className="text-gray-600">Your payment has been cancelled. No charges were made to your account.</p>
        </div>

        {/* Status Information */}
        <div className="bg-gray-50 p-4 rounded-lg mb-6">
          <div className="flex items-center justify-center mb-2">
            {releaseStatus === 'success' ? (
              <svg className="w-5 h-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            ) : releaseStatus === 'error' ? (
              <svg className="w-5 h-5 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            ) : (
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-gray-600 mr-2"></div>
            )}
            <span className={`text-sm font-medium ${
              releaseStatus === 'success' ? 'text-green-700' : 
              releaseStatus === 'error' ? 'text-red-700' : 
              'text-gray-700'
            }`}>
              {releaseStatus === 'success' && 'Inventory Successfully Released'}
              {releaseStatus === 'error' && 'Inventory Release Failed'}
              {releaseStatus === 'processing' && 'Processing...'}
            </span>
          </div>
          <p className="text-sm text-gray-600">
            {releaseStatus === 'success' && 'The reserved inventory has been released and is now available for other customers.'}
            {releaseStatus === 'error' && 'There was an issue releasing the inventory. Please contact support if needed.'}
            {releaseStatus === 'processing' && 'Please wait while we process your cancellation...'}
          </p>
        </div>

        {/* Cancellation Details */}
        {searchParams.get('error') && (
          <div className="bg-red-50 p-4 rounded-lg mb-6">
            <h3 className="text-sm font-semibold text-red-800 mb-1">Cancellation Reason:</h3>
            <p className="text-sm text-red-700">{decodeURIComponent(searchParams.get('error') || '')}</p>
          </div>
        )}

        {/* Action Buttons */}
        <div className="space-y-3">
          <Link
            href="/cart"
            className="block w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 transition font-semibold"
          >
            Return to Cart
          </Link>
          
          <Link
            href="/payment"
            className="block w-full bg-yellow-600 text-white py-3 px-4 rounded-md hover:bg-yellow-700 transition font-semibold"
          >
            Try Payment Again
          </Link>
          
          <Link
            href="/"
            className="block w-full bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300 transition"
          >
            Continue Shopping
          </Link>
        </div>

        {/* Help Section */}
        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <p className="text-sm text-blue-700 font-medium mb-1">Need Help?</p>
          <p className="text-xs text-blue-600">
            If you're experiencing issues with payment, please contact our support team.
          </p>
        </div>

        {/* Company Info */}
        <p className="mt-6 text-xs text-gray-500">
          Delente Technologies Pvt. Ltd.<br />
          M3M Cosmopolitan, Sector 66, Gurugram, Haryana 122002<br />
          <span className="text-gray-400">Your items remain in cart</span>
        </p>
      </div>
    </div>
  );
}